你知道吗？simbot开发团队所有成员的出生日期都在1999年。
你知道吗？simple-robot的命名由来是因为开发者并不会起名字，因此选择了简单易懂的simple。
你知道吗？simbot开发团队所有成员的出生日期都在8月。
你知道吗？simbot中代码注释的编辑者与文档编辑者是同一个人。
你知道吗？simbot开发团队的成员们都很喜欢kotlin，因为它们都很喜欢java。
你知道吗？simbot开发团队的成员们都不能喝酒。
你知道吗？simbot的早期版本是没有核心与组件之分的。
你知道吗？simbot开发团队中修改bug最多的人与年龄最大的人是同一个人。
你知道吗？simbot开发团队中负责进行架构设计的人与年龄最小的人是同一个人。
你知道吗？simbot开发团队中离职次数最多的人与个头最高的人是同一个人。
你知道吗？simbot开发团队的成员们都曾在北京工作过。
你知道吗？simbot开发团队与forte-common开发团队、catCode开发团队的关系非常好，经常会一起玩玩游戏摸摸鱼。
你知道吗？simbot中代码注释的编辑者与文档编辑者是同一个人。
你知道吗？simbot除了有QQ交流群，实际上还有TG交流群。
你知道吗？simbot开发团队一直想要尝试在项目中加入logo与tips。
你知道吗？simbot开发团队一直希望拥有一个活跃的社区。因此它们将文档的团队讨论区定义为社区，并期待着人们的讨论。
你知道吗？在simbot框架QQ交流群782930037中，所有的simbot开发团队成员都在这个群里，但是它们都不是管理员。
你知道吗？ForteScarlet是simbot团队的创始人，也是simbot项目的发起者。
你知道吗？CatCode的logo是由simbot开发团队的成员所绘制的。
你知道吗？simbot的logo是由CatCode开发团队的成员所绘制的。感谢他们！
你知道吗？catCode开发团队的成员们都很喜欢猫。
你知道吗？catCode的规范来源于CQ码。
你知道吗？catCode的名称之所以叫做“猫猫码”而不是“猫咪码”是因为前者听上去比较顺口。
你知道吗？catCode实际上可以直接通过kotlin发布全平台库（JVM/JS/Native），但是catCode团队不知道如何发布，便暂时搁置了。
你知道吗？你不知道。
你知道吗？你知道的。
你知道吗？那些开头是“你知道吗？”的tips中的内容很多都是谎言，但同时也是事实。
你知道吗？如果你读到了这条tips，那么就相当于没有读到tips。
你知道一共有多少个启动logo吗？
你知道一共有多少条tips吗？
监听函数曾经并不是接口类型的。
如果你能够了解何时该使用CatCodeUtil或MessageContentBuilder，那么你的程序效率会更高，反之则会使得效率变得更低。
之所以MessageGet中要区分text、msg、msgContent，是因为要同时考虑组件实现、消息过滤匹配、消息发送等多个方面的效率问题与兼容问题。
simbot中内置的默认log实现nekolog整合了国际化language模块，但是考虑到切换日志后的兼容性，simbot中并没有使用这一特性。
simbot2.x的github地址是https://github.com/ForteScarlet/simpler-robot 。
simbot2.x中极大的利用了依赖注入的自动装配功能，这有效的改善了1.x中出现的强耦合的情况。
simbot2.x中大大减少了第三方依赖的数量，但同时也大大增加了simbot依赖模块的数量。但至少官方的模块是更可控的，不是吗？
simbot2.x中的flag的设计是为了使得同一个类型的接口能够拥有可区分的职责。
simbot的整体架构是编绘于脑海中并不断发生着变动的。
注意保护颈椎，多站起来活动活动是个不错的选择。
记得多喝水。
站起来活动一下吧。
看看远处的风景。
善用@FilterValue可以简化你的代码与逻辑。
不要忘记为猫猫码点亮一颗星星哦！猫猫码：https://github.com/ForteScarlet/CatCode
不要忘记为simpler-robot点亮一颗星星哦！simpler-robot：https://github.com/ForteScarlet/simpler-robot
不要忘记为forte-common通用库点亮一颗星星哦！forte-common通用库：https://github.com/ForteScarlet/forte-common
在mirai组件中，发送消息使用MessageContent比使用CAT码更高效。
妥善抉择额外的扩展模块（例如serialization-json或http-client）可以让你的依赖包更小。
在监听函数之外，你可以使用BotManager来得到每个Bot的送信器。
不要老是想着springboot, simple-robot也有依赖注入和自动装配机制。
json序列化模块提供了多个目标库的实现，其中包括fastjson、jackson、moshi等，你完全可以根据当前项目环境选择一个合适的模块。
http-client模块提供了多个目标库的实现，其中包括ktor-cio-client、restTemplate、urlConnection等，你完全可以根据当前项目环境选择一个合适的模块。
你可以用ListenerContext来实现Listener之间的信息传递。
你可以在启动类上实现SimbotProcess接口来实现参与启动前与启动后的部分操作。
你可以通过AtDetectionRegistrar.registryAtDetection来注册一个AT匹配器。
你可以通过ListenerFilterRegistrar.registerFilter或者注入一个自定义的ListenerFilter（记得@Beans要指定名称）来注册一个自定义过滤器。
善用@Filter的target可以让你拥有更灵活的过滤规则。
simbot的第一次提交是2019年三月。
simbot2.x的第一次提交是2020年七月。
如果你有一个基于simbot的优秀项目，欢迎通过github issue、github讨论区等方式联系开发团队对你酷酷的项目进行展示。